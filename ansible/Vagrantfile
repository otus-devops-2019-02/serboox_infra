# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # config.vm.box = "base"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

  config.vm.provider :libvirt do |libvirt|
     # A hypervisor name to access. Different drivers can be specified, but
    # this version of provider creates KVM machines only. Some examples of
    # drivers are KVM (QEMU hardware accelerated), QEMU (QEMU emulated),
    # Xen (Xen hypervisor), lxc (Linux Containers),
    # esx (VMware ESX), vmwarews (VMware Workstation) and more. Refer to
    # documentation for available drivers (http://libvirt.org/drivers.html).
    libvirt.driver = "kvm"

    # The name of the server, where Libvirtd is running.
    # libvirt.host = "localhost"

    # If use ssh tunnel to connect to Libvirt.
    libvirt.connect_via_ssh = false

    # The username and password to access Libvirt. Password is not used when
    # connecting via ssh.
    libvirt.username = "root"
    #libvirt.password = "secret"

    # Libvirt storage pool name, where box image and instance snapshots will
    # be stored.
    libvirt.storage_pool_name = "default"

    # Set a prefix for the machines that's different than the project dir name.
    #libvirt.default_prefix = ''

    libvirt.memory = 512

    libvirt.cpus = 1
  end

  config.vm.define "dbserver" do |db|
    db.vm.box = "generic/ubuntu1604"
    db.vm.hostname = "dbserver"
    db.vm.network :private_network, ip: "10.10.10.10"
    db.vm.network :public_network,
      :dev => "virbr0",
      :mode => "bridge",
      :type => "bridge",
      :ip => "10.10.10.11"

    db.vm.provision "ansible" do |ansible|
      ansible.playbook = "playbooks/site.yml"
      #ansible.inventory_path = "./environments/stage/inventory"
      ansible.groups = {
        "db" => ["dbserver"],
        "db:vars" => {"mongo_bind_ip" => "0.0.0.0"}
      }
      #ansible.raw_arguments  = [
      #  "--connection=ssh",
      #  "--private-key=.vagrant/machines/dbserver/libvirt/private_key"
      #
    end
  end

  config.vm.define "appserver" do |app|
    app.vm.box = "generic/ubuntu1604"
    app.vm.hostname = "appserver"
    app.vm.network :private_network, ip: "10.10.10.20"
    app.vm.network :public_network,
      :dev => "virbr0",
      :mode => "bridge",
      :type => "bridge",
      :ip => "10.10.10.21"

    app.vm.provision "ansible" do |ansible|
      ansible.playbook = "playbooks/site.yml"
      #ansible.inventory_path = "./environments/stage/inventory"
      ansible.groups = {
        "app" => ["appserver"],
        "app:vars" => {
          "db_host" => "10.10.10.10",
          "default_port" => "80",
          "default_server_name" => "reddit",
          "reddit_port" => "9292",
        }
      }
      ansible.extra_vars = {
        "deploy_user" => "vagrant"
      }
    end
  end
end
